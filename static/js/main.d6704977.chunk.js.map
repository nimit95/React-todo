{"version":3,"sources":["hooks/useInputState.js","hooks/useToggleState.js","hooks/useLocalStorageState.js","hooks/useTodoState.js","reducers/todos.reducer.js","context/todos.context.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useInputState","initialValue","useState","state","setState","e","target","value","useToggleState","defaultVal","useLocalStorageState","key","JSON","parse","window","localStorage","getItem","String","console","log","useEffect","setItem","stringify","useTodoState","id","task","completed","todos","setTodos","addTodo","newTodos","uuid","editTodo","map","todo","removeTodo","filter","toggleTodo","reducer","action","type","editedTodo","initialTodo","TodosContext","createContext","TodosProvider","props","useReducer","dispatch","Provider","children","Todo","useContext","isEditing","toggleState","handleChange","todoRender","onSubmit","preventDefault","TextField","onChange","fullWidth","autoFocus","ListItem","style","height","Checkbox","checked","tabIndex","ListItemText","IconButton","onClick","TodoList","length","Paper","List","i","Fragment","Divider","TodoForm","reset","margin","padding","label","TodoApp","backgroundColor","elevation","AppBar","position","color","Toolbar","Typography","Grid","container","justify","marginTop","item","lg","sm","md","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6704977.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction useInputState(initialValue) {\n  let [state, setState] = useState(initialValue);\n  let handleChange = (e) => {\n    setState(e.target.value);\n  }\n  let reset = () => {\n    setState(\"\");\n  }\n\n  return [state, handleChange, reset];\n}\n\nexport default useInputState","import { useContext, useState } from \"react\";\n\nfunction useToggleState(defaultVal = false) {\n  let [state, setState] = useState(defaultVal);\n\n  let toggleState = () => {\n    setState(!state);\n  }\n  return [state, toggleState];\n}\n\nexport default useToggleState;","import { useState, useEffect} from 'react'\n\nfunction useLocalStorageState(key, defaultVal) {\n\n  let [state, setState] = useState(() => {\n    let value;\n    try {\n      value = JSON.parse(window.localStorage.getItem(key) || String(defaultVal))\n    } catch(e) {\n      value = defaultVal;\n    }\n    console.log(\"USing value is \", value)\n    return value;\n  })\n\n  console.log(\"STATE is \", state);\n\n  useEffect(() => {\n    console.log(\"calling use effect with \", state);\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state])\n\n  return [state, setState]\n}\n\nexport default useLocalStorageState;","\nimport uuid from 'uuid'\nimport { useEffect, useState } from 'react'\nimport useLocalStorageState from \"./useLocalStorageState\";\n\nfunction useTodoState() {\n  let initialTodo = [\n    { id: 1234, task: \"This is the first todo\", completed: false },\n    { id: 1235, task: \"This is the second todo\", completed: false }\n  ];\n  \n  let [todos, setTodos] = useLocalStorageState(\"todos\", initialTodo);\n\n  let addTodo = (task) => {\n    let newTodos = [...todos, { id: uuid(), task: task, completed: false }];\n    setTodos(newTodos);\n  };\n  let editTodo = (id, task) => {\n    console.log(\"COMING IN EDIT \", todos);\n    let newTodos = todos.map(todo => {\n      return todo.id === id ? { ...todo, task: task } : todo;\n    });\n    console.log(\"SETTING NEW \", newTodos);\n    setTodos(newTodos);\n  };\n  let removeTodo = (id) => {\n    let newTodos = todos.filter(todo => {\n      return todo.id !== id\n    });\n    console.log(\"Removed todos are\", newTodos);\n    setTodos(newTodos);\n  };\n  let toggleTodo = (id) => {\n    let newTodos = todos.map(todo => {\n      return todo.id === id ? { ...todo, completed: !todo.completed } : todo;\n    });\n    setTodos(newTodos);\n  };\n  return {\n    todos,\n    addTodo,\n    editTodo,\n    removeTodo,\n    toggleTodo\n  }\n}\nexport default useTodoState;","import uuid from 'uuid'\n\nlet reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      return [...state, {id: uuid(), task: action.task, completed: false}];\n    case \"REMOVE\":\n      console.log(\"reducer gets \", action.id);\n      return state.filter(todo => {\n        return todo.id !== action.id\n      });\n    case \"EDIT\":\n      console.log(\"TO edit\", state, action);\n      let editedTodo = state.map(todo => {\n        return todo.id === action.id ? {...todo, task: action.task} : todo;\n      });\n      console.log(\"edited todos are\", editedTodo);\n      return editedTodo;\n    case \"TOGGLE\":\n      return state.map(todo => {\n        return todo.id === action.id ? {...todo, completed: !todo.completed} : todo;\n      });\n    default:\n      return state;\n  }\n};\nexport default reducer;","import React, {createContext, useReducer} from \"react\";\nimport useTodoState from \"../hooks/useTodoState\";\nimport reducer from \"../reducers/todos.reducer\";\n\n\nlet initialTodo = [\n  { id: 1234, task: \"This is the first todo\", completed: false },\n  { id: 1235, task: \"This is the second todo\", completed: false }\n];\n\nexport const TodosContext = createContext();\n\nfunction TodosProvider(props) {\n  const [todos, dispatch] = useReducer(reducer, initialTodo);\n  console.log(\"TOdostuff is \", TodosContext);\n  return (\n    <TodosContext.Provider value={{ todos, dispatch }}>\n      {props.children}\n    </TodosContext.Provider>\n  )\n}\n\nexport default TodosProvider;\n","import React, {useContext, useState} from \"react\"\nimport TextField from \"@material-ui/core/TextField\";\nimport useInputState from './hooks/useInputState'\nimport {Checkbox} from \"@material-ui/core\";\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport useToggleState from './hooks/useToggleState'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport EditIcon from '@material-ui/icons/Edit'\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {TodosContext} from \"./context/todos.context\";\n\nfunction Todo(props) {\n  let {todo} = props;\n  let {dispatch} = useContext(TodosContext);\n  let [isEditing, toggleState] = useToggleState();\n  let [task, handleChange, reset] = useInputState(todo.task);\n\n  console.log(\"rendering todo \", todo, task);\n  let removeTodoWithId = () => {\n    console.log(\"removing todo with id, \", todo)\n    dispatch({type: \"REMOVE\", id: todo.id});\n  };\n  let todoRender = (\n    !isEditing ?\n      <p>{todo.task}</p> :\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          console.log(\"CALLING EDIT TODO\", task);\n          dispatch({type: \"EDIT\", id: todo.id, task: task});\n          toggleState()\n        }}\n      >\n        <TextField\n          onChange={handleChange}\n          value={task}\n          fullWidth\n          autoFocus\n        />\n      </form>\n  );\n  return (\n    <ListItem key={todo.id} style={{height: \"64px\"}}>\n      <Checkbox checked={todo.completed} tabIndex={-1}/>\n      <ListItemText>\n        {todoRender}\n      </ListItemText>\n      <IconButton onClick={removeTodoWithId}>\n        <DeleteIcon/>\n      </IconButton>\n      <IconButton onClick={toggleState}>\n        <EditIcon/>\n      </IconButton>\n    </ListItem>\n  )\n}\n\n\nexport default Todo;","import React, { useState, useContext } from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport List from '@material-ui/core/List'\nimport Divider from '@material-ui/core/Divider'\nimport { Toolbar, Typography } from '@material-ui/core'\nimport Todo from './Todo'\nimport { TodosContext } from \"./context/todos.context\";\n\nfunction TodoList(props) {\n\n  let { todos } = useContext(TodosContext);\n  console.log(\"todos are \" + todos)\n  if (todos.length) {\n    return (\n      <Paper>\n        <List>\n          {todos.map((todo, i) => {\n            console.log(\"rendering todo\", todo)\n            return (\n              <React.Fragment key={todo.id}>\n                <Todo\n                  todo={todo}\n                />\n                {!!(todos.length - i - 1) && <Divider />}\n              </React.Fragment>\n            )\n          })}\n        </List>\n      </Paper>\n    )\n  }\n  else return null;\n}\n\nexport default TodoList;","import React, {useState, useContext} from \"react\"\nimport TextField from \"@material-ui/core/TextField\";\nimport {Paper} from \"@material-ui/core\";\nimport useInputState from './hooks/useInputState'\nimport {TodosContext} from \"./context/todos.context\";\n\nfunction TodoForm(props) {\n  let {dispatch} = useContext(TodosContext);\n  let [task, handleChange, reset] = useInputState(\"\");\n  return (\n    <Paper style={{margin: \"1rem 0\", padding: \"0 0.5rem\"}}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          dispatch({type: \"ADD\", task: task});\n          reset();\n        }}\n      >\n        <TextField\n          onChange={handleChange}\n          value={task}\n          fullWidth\n          margin=\"normal\"\n          label=\"Add new todo\"\n        />\n      </form>\n    </Paper>\n  );\n}\n\nexport default TodoForm;","import React, { useState, useEffect } from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport AppBar from '@material-ui/core/AppBar'\nimport { Toolbar, Typography, TableSortLabel } from '@material-ui/core'\nimport TodoList from './TodoList'\nimport TodoForm from \"./TodoForm\";\nimport Grid from '@material-ui/core/Grid'\nimport useTodoState from './hooks/useTodoState'\nimport TodosProvider from './context/todos.context'\n\nfunction TodoApp() {\n\n  let { todos, addTodo, removeTodo, editTodo, toggleTodo } = useTodoState()\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\"\n      }}\n      elevation={0}\n    >\n      <AppBar position=\"static\" color=\"primary\" style={{ height: \"64px\" }}>\n        <Toolbar>\n          <Typography>Todos with hooks</Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container justify=\"center\" style={{ marginTop: \"2rem\" }}>\n        <Grid item lg={4} sm={11} md={8}>\n          <TodosProvider>\n            <TodoForm />\n            <TodoList />\n          </TodosProvider>\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nexport default TodoApp;\n\n// 1. TodoApp \n  // a. AddTodo\n  // b. TodoItem\n\n// TodoItem - { id, task, completed }\n","\nimport React from 'react'\nimport './App.css';\nimport TodoApp from './TodoApp'\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}